#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('newapi:server');
const http = require('http');
const WebSocketService = require('../services/WebSocketService');
const LoggingService = require('../services/monitoring/LoggingService');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

// Initialize WebSocket service
WebSocketService.initialize(server);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Clean up WebSocket connections on server shutdown
process.on('SIGTERM', () => {
    LoggingService.logDebug('SIGTERM signal received: closing HTTP server');
    WebSocketService.cleanup();
    server.close(() => {
        LoggingService.logDebug('HTTP server closed');
        process.exit(0);
    });
});

function normalizePort(val) {
    const port = parseInt(val, 10);
    if (isNaN(port)) return val;
    if (port >= 0) return port;
    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') throw error;
    
    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            LoggingService.logError(error, {
                context: 'Server startup',
                message: `${bind} requires elevated privileges`
            });
            process.exit(1);
            break;
        case 'EADDRINUSE':
            LoggingService.logError(error, {
                context: 'Server startup',
                message: `${bind} is already in use`
            });
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    LoggingService.logDebug('Server started', { listening: bind });
}
